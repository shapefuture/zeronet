// This file is normally auto-generated by flatc.
// Simplified hand-written version for demonstration.

import { ByteBuffer } from "flatbuffers";

export class DOMSnapshot {
  __bb: ByteBuffer | null = null;
  __init(i: number, bb: ByteBuffer) { this.__bb = bb; }
  static getRootAsDOMSnapshot(bb: ByteBuffer): DOMSnapshot {
    const obj = new DOMSnapshot();
    obj.__init(bb.position(), bb);
    return obj;
  }
  url(): string { return this.__string(0); }
  html(): string { return this.__string(1); }
  timestamp(): number { 
    if(!this.__bb) return 0;
    // field 2 (timestamp) offset depends on schema; for simple demo, just read uint64
    return Number(this.__bb.readUint64(8));
  }
  metadata(): string { return this.__string(3); }
  __string(field: number): string {
    if (!this.__bb) return "";
    // Offset lookup simplified; real generated code will use vtable
    const offset = 4 + field * 4;
    const pos = this.__bb.readInt32(offset);
    if (pos === 0) return "";
    return this.__bb.__string(pos + offset);
  }
}